@model IEnumerable<Presentation>
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Collaborative Presentation - Main</title>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">List of presentations</h1>
        @if (TempData["ErrorUsername"] != null)
        {
            <label class="alert alert-danger">
                @TempData["ErrorUsername"]
            </label>
        }
        <div class="mb-3">
            <label for="nickName" class="form-label">Username</label>
            <input type="text" class="form-control" id="nickName" name="nickName" />
        </div>
        <div id="presentationsList" class="list-group">
            @if (Model != null) foreach (var item in Model)
            {
                <form method="post" asp-action="Join" class="d-inline">
                    <input type="hidden" name="idPresentation" value="@item.Id" />
                    <input type="hidden" name="nickName" class="hidden-nick" value="" />
                    <input type="hidden" name="isOwner" value="false" />
                    <button type="submit" class="list-group-item list-group-item-action">
                        @item.Name
                    </button>
                </form>
            }
        </div>

        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Create a presentation</h5>
                @if (TempData["ErrorCreate"] != null)
                {
                    <label class="alert alert-danger">
                        @TempData["ErrorCreate"]
                    </label>
                }
                <form id="createForm" method="post" asp-action="Create">
                    <div class="mb-3">
                        <label for="conferenceName" class="form-label">Presentation name</label>
                        <input type="text" class="form-control" id="conferenceName" name="conferenceName" />
                    </div>
                    <div class="mb-3">
                        <label for="nickName" class="form-label">Username</label>
                        <input type="text" class="form-control" id="nickName" name="nickName" />
                    </div>
                    <button type="submit" class="btn btn-primary">Create</button>
                </form>
            </div>
        </div>
    </div>
    <div id="notification-container" style="position: fixed; top: 1rem; right: 1rem; z-index: 1050;"></div>
</body>
</html>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css"/>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
<script>
    const nickNameInput = document.getElementById("nickName");

    // При изменении значения обновляем скрытые поля
    nickNameInput.addEventListener("input", () => {
        const hiddenNickFields = document.querySelectorAll(".hidden-nick");
        hiddenNickFields.forEach(field => {
            field.value = nickNameInput.value.trim();
        });
    });
    // Подключение к SignalR
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/presentationHub") // URL хаба
        .build();

    connection.on("PresentationAdded", (presentation) => {
        // Добавляем новую презентацию в список
        const presentationsList = document.getElementById("presentationsList");
        const newForm = document.createElement("form");
        newForm.method = "post";
        newForm.action = "Presentation/Join";
        newForm.classList.add("d-inline");
        newForm.innerHTML = `
                    <input type="hidden" name="idPresentation" value="${presentation.id}" />
                    <input type="hidden" name="nickName" class="hidden-nick" value="" />
                    <input type="hidden" name="isOwner" value="false" />
                    <button type="submit" class="list-group-item list-group-item-action">
                        ${presentation.name}
                    </button>`;

        presentationsList.appendChild(newForm);
    });
    connection.on("PresentationDeleted", (presentation) => {

        const forms = document.querySelectorAll(`form input[value="${presentation.id}"]`);
        forms.forEach(input => {
            const form = input.closest('form');
            form.remove();
        });
    });

    // Запускаем соединение
    async function startSignalRConnection() {
        try {
            await connection.start();
            console.log("Connected to SignalR");
        } catch (err) {
            console.error("SignalR connection failed:", err);
            setTimeout(startSignalRConnection, 1000);
        }
    }

    startSignalRConnection();

</script>
<style>
    .fade-out {
        opacity: 0;
        transition: opacity 0.3s;
    }
</style>
